$date
	Wed Jan 01 23:04:20 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testTB $end
$var wire 16 ! c [15:0] $end
$var wire 1 " cout $end
$var wire 1 # g_out $end
$var wire 1 $ p_out $end
$var wire 8 % result [7:0] $end
$var wire 8 & sum [7:0] $end
$var reg 8 ' a [7:0] $end
$var reg 8 ( b [7:0] $end
$var reg 1 ) cin $end
$scope module EIGHT_ADDER $end
$var wire 8 * a [7:0] $end
$var wire 8 + b [7:0] $end
$var wire 1 , c $end
$var wire 1 - cin $end
$var wire 1 " cout $end
$var wire 8 . sum [7:0] $end
$scope module f1 $end
$var wire 4 / a [3:0] $end
$var wire 4 0 b [3:0] $end
$var wire 3 1 c [2:0] $end
$var wire 1 - cin $end
$var wire 1 , cout $end
$var wire 4 2 sum [3:0] $end
$scope module a1 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 - cin $end
$var wire 1 5 cout $end
$var wire 1 6 couta1 $end
$var wire 1 7 couta2 $end
$var wire 1 8 sum $end
$var wire 1 9 suma1 $end
$scope module u1 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 6 cout $end
$var wire 1 9 sum $end
$upscope $end
$scope module u2 $end
$var wire 1 9 a $end
$var wire 1 - b $end
$var wire 1 7 cout $end
$var wire 1 8 sum $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 < cin $end
$var wire 1 = cout $end
$var wire 1 > couta1 $end
$var wire 1 ? couta2 $end
$var wire 1 @ sum $end
$var wire 1 A suma1 $end
$scope module u1 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 > cout $end
$var wire 1 A sum $end
$upscope $end
$scope module u2 $end
$var wire 1 A a $end
$var wire 1 < b $end
$var wire 1 ? cout $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$scope module a3 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D cin $end
$var wire 1 E cout $end
$var wire 1 F couta1 $end
$var wire 1 G couta2 $end
$var wire 1 H sum $end
$var wire 1 I suma1 $end
$scope module u1 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 F cout $end
$var wire 1 I sum $end
$upscope $end
$scope module u2 $end
$var wire 1 I a $end
$var wire 1 D b $end
$var wire 1 G cout $end
$var wire 1 H sum $end
$upscope $end
$upscope $end
$scope module a4 $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 L cin $end
$var wire 1 , cout $end
$var wire 1 M couta1 $end
$var wire 1 N couta2 $end
$var wire 1 O sum $end
$var wire 1 P suma1 $end
$scope module u1 $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 M cout $end
$var wire 1 P sum $end
$upscope $end
$scope module u2 $end
$var wire 1 P a $end
$var wire 1 L b $end
$var wire 1 N cout $end
$var wire 1 O sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 4 Q a [3:0] $end
$var wire 4 R b [3:0] $end
$var wire 3 S c [2:0] $end
$var wire 1 , cin $end
$var wire 1 " cout $end
$var wire 4 T sum [3:0] $end
$scope module a1 $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 , cin $end
$var wire 1 W cout $end
$var wire 1 X couta1 $end
$var wire 1 Y couta2 $end
$var wire 1 Z sum $end
$var wire 1 [ suma1 $end
$scope module u1 $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 X cout $end
$var wire 1 [ sum $end
$upscope $end
$scope module u2 $end
$var wire 1 [ a $end
$var wire 1 , b $end
$var wire 1 Y cout $end
$var wire 1 Z sum $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 ^ cin $end
$var wire 1 _ cout $end
$var wire 1 ` couta1 $end
$var wire 1 a couta2 $end
$var wire 1 b sum $end
$var wire 1 c suma1 $end
$scope module u1 $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 ` cout $end
$var wire 1 c sum $end
$upscope $end
$scope module u2 $end
$var wire 1 c a $end
$var wire 1 ^ b $end
$var wire 1 a cout $end
$var wire 1 b sum $end
$upscope $end
$upscope $end
$scope module a3 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 f cin $end
$var wire 1 g cout $end
$var wire 1 h couta1 $end
$var wire 1 i couta2 $end
$var wire 1 j sum $end
$var wire 1 k suma1 $end
$scope module u1 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 h cout $end
$var wire 1 k sum $end
$upscope $end
$scope module u2 $end
$var wire 1 k a $end
$var wire 1 f b $end
$var wire 1 i cout $end
$var wire 1 j sum $end
$upscope $end
$upscope $end
$scope module a4 $end
$var wire 1 l a $end
$var wire 1 m b $end
$var wire 1 n cin $end
$var wire 1 " cout $end
$var wire 1 o couta1 $end
$var wire 1 p couta2 $end
$var wire 1 q sum $end
$var wire 1 r suma1 $end
$scope module u1 $end
$var wire 1 l a $end
$var wire 1 m b $end
$var wire 1 o cout $end
$var wire 1 r sum $end
$upscope $end
$scope module u2 $end
$var wire 1 r a $end
$var wire 1 n b $end
$var wire 1 p cout $end
$var wire 1 q sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CLA_8 $end
$var wire 8 s a [7:0] $end
$var wire 8 t b [7:0] $end
$var wire 1 - cin $end
$var wire 1 u cout $end
$var wire 2 v g [1:0] $end
$var wire 1 # g_out $end
$var wire 2 w p [1:0] $end
$var wire 1 $ p_out $end
$var wire 8 x s [7:0] $end
$scope module l1 $end
$var wire 4 y a [3:0] $end
$var wire 4 z b [3:0] $end
$var wire 1 - cin $end
$var wire 1 { cout $end
$var wire 2 | g [1:0] $end
$var wire 1 } g_out $end
$var wire 2 ~ p [1:0] $end
$var wire 1 !" p_out $end
$var wire 4 "" s [3:0] $end
$scope module l1 $end
$var wire 2 #" a [1:0] $end
$var wire 2 $" b [1:0] $end
$var wire 1 - cin $end
$var wire 1 %" cout $end
$var wire 2 &" g [1:0] $end
$var wire 1 '" g_out $end
$var wire 2 (" p [1:0] $end
$var wire 1 )" p_out $end
$var wire 2 *" s [1:0] $end
$scope module a0 $end
$var wire 1 +" a $end
$var wire 1 ," b $end
$var wire 1 - c $end
$var wire 1 -" g $end
$var wire 1 ." p $end
$var wire 1 /" s $end
$upscope $end
$scope module a1 $end
$var wire 1 0" a $end
$var wire 1 1" b $end
$var wire 1 %" c $end
$var wire 1 2" g $end
$var wire 1 3" p $end
$var wire 1 4" s $end
$upscope $end
$scope module gp0 $end
$var wire 1 - c_in $end
$var wire 1 %" c_out $end
$var wire 2 5" g [1:0] $end
$var wire 1 '" g_out $end
$var wire 2 6" p [1:0] $end
$var wire 1 )" p_out $end
$upscope $end
$upscope $end
$scope module l2 $end
$var wire 2 7" a [1:0] $end
$var wire 2 8" b [1:0] $end
$var wire 1 { cin $end
$var wire 1 9" cout $end
$var wire 2 :" g [1:0] $end
$var wire 1 ;" g_out $end
$var wire 2 <" p [1:0] $end
$var wire 1 =" p_out $end
$var wire 2 >" s [1:0] $end
$scope module a0 $end
$var wire 1 ?" a $end
$var wire 1 @" b $end
$var wire 1 { c $end
$var wire 1 A" g $end
$var wire 1 B" p $end
$var wire 1 C" s $end
$upscope $end
$scope module a1 $end
$var wire 1 D" a $end
$var wire 1 E" b $end
$var wire 1 9" c $end
$var wire 1 F" g $end
$var wire 1 G" p $end
$var wire 1 H" s $end
$upscope $end
$scope module gp0 $end
$var wire 1 { c_in $end
$var wire 1 9" c_out $end
$var wire 2 I" g [1:0] $end
$var wire 1 ;" g_out $end
$var wire 2 J" p [1:0] $end
$var wire 1 =" p_out $end
$upscope $end
$upscope $end
$scope module gp1 $end
$var wire 1 - c_in $end
$var wire 1 { c_out $end
$var wire 2 K" g [1:0] $end
$var wire 1 } g_out $end
$var wire 2 L" p [1:0] $end
$var wire 1 !" p_out $end
$upscope $end
$upscope $end
$scope module l2 $end
$var wire 4 M" a [3:0] $end
$var wire 4 N" b [3:0] $end
$var wire 1 u cin $end
$var wire 1 O" cout $end
$var wire 2 P" g [1:0] $end
$var wire 1 Q" g_out $end
$var wire 2 R" p [1:0] $end
$var wire 1 S" p_out $end
$var wire 4 T" s [3:0] $end
$scope module l1 $end
$var wire 2 U" a [1:0] $end
$var wire 2 V" b [1:0] $end
$var wire 1 u cin $end
$var wire 1 W" cout $end
$var wire 2 X" g [1:0] $end
$var wire 1 Y" g_out $end
$var wire 2 Z" p [1:0] $end
$var wire 1 [" p_out $end
$var wire 2 \" s [1:0] $end
$scope module a0 $end
$var wire 1 ]" a $end
$var wire 1 ^" b $end
$var wire 1 u c $end
$var wire 1 _" g $end
$var wire 1 `" p $end
$var wire 1 a" s $end
$upscope $end
$scope module a1 $end
$var wire 1 b" a $end
$var wire 1 c" b $end
$var wire 1 W" c $end
$var wire 1 d" g $end
$var wire 1 e" p $end
$var wire 1 f" s $end
$upscope $end
$scope module gp0 $end
$var wire 1 u c_in $end
$var wire 1 W" c_out $end
$var wire 2 g" g [1:0] $end
$var wire 1 Y" g_out $end
$var wire 2 h" p [1:0] $end
$var wire 1 [" p_out $end
$upscope $end
$upscope $end
$scope module l2 $end
$var wire 2 i" a [1:0] $end
$var wire 2 j" b [1:0] $end
$var wire 1 O" cin $end
$var wire 1 k" cout $end
$var wire 2 l" g [1:0] $end
$var wire 1 m" g_out $end
$var wire 2 n" p [1:0] $end
$var wire 1 o" p_out $end
$var wire 2 p" s [1:0] $end
$scope module a0 $end
$var wire 1 q" a $end
$var wire 1 r" b $end
$var wire 1 O" c $end
$var wire 1 s" g $end
$var wire 1 t" p $end
$var wire 1 u" s $end
$upscope $end
$scope module a1 $end
$var wire 1 v" a $end
$var wire 1 w" b $end
$var wire 1 k" c $end
$var wire 1 x" g $end
$var wire 1 y" p $end
$var wire 1 z" s $end
$upscope $end
$scope module gp0 $end
$var wire 1 O" c_in $end
$var wire 1 k" c_out $end
$var wire 2 {" g [1:0] $end
$var wire 1 m" g_out $end
$var wire 2 |" p [1:0] $end
$var wire 1 o" p_out $end
$upscope $end
$upscope $end
$scope module gp1 $end
$var wire 1 u c_in $end
$var wire 1 O" c_out $end
$var wire 2 }" g [1:0] $end
$var wire 1 Q" g_out $end
$var wire 2 ~" p [1:0] $end
$var wire 1 S" p_out $end
$upscope $end
$upscope $end
$scope module gp1 $end
$var wire 1 - c_in $end
$var wire 1 u c_out $end
$var wire 2 !# g [1:0] $end
$var wire 1 # g_out $end
$var wire 2 "# p [1:0] $end
$var wire 1 $ p_out $end
$upscope $end
$upscope $end
$scope module MULTIPLIER $end
$var wire 8 ## a [7:0] $end
$var wire 8 $# ab0 [7:0] $end
$var wire 8 %# ab1 [7:0] $end
$var wire 8 &# ab2 [7:0] $end
$var wire 8 '# ab3 [7:0] $end
$var wire 8 (# ab4 [7:0] $end
$var wire 8 )# ab5 [7:0] $end
$var wire 8 *# ab6 [7:0] $end
$var wire 8 +# ab7 [7:0] $end
$var wire 8 ,# b [7:0] $end
$var wire 16 -# result [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000110 -#
b111 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b1010 &#
b1010 %#
b1010 $#
b1010 ##
b1 "#
b1 !#
b0 ~"
b0 }"
b0 |"
b0 {"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
b0 p"
0o"
b0 n"
0m"
b0 l"
0k"
b0 j"
b0 i"
b0 h"
b0 g"
0f"
0e"
0d"
0c"
0b"
1a"
0`"
0_"
0^"
0]"
b1 \"
0["
b0 Z"
0Y"
b0 X"
0W"
b0 V"
b0 U"
b1 T"
0S"
b0 R"
0Q"
b0 P"
0O"
b0 N"
b0 M"
b11 L"
b1 K"
b11 J"
b0 I"
0H"
1G"
0F"
0E"
1D"
0C"
1B"
0A"
1@"
0?"
b0 >"
1="
b11 <"
0;"
b0 :"
19"
b1 8"
b10 7"
b11 6"
b10 5"
04"
13"
12"
11"
10"
1/"
1."
0-"
1,"
0+"
b1 *"
1)"
b11 ("
1'"
b10 &"
0%"
b11 $"
b10 #"
b1 ""
1!"
b11 ~
1}
b1 |
1{
b111 z
b1010 y
b10001 x
b1 w
b1 v
1u
b111 t
b1010 s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
1Z
0Y
0X
0W
0V
0U
b1 T
b0 S
b0 R
b0 Q
1P
0O
1N
0M
1L
0K
1J
1I
0H
1G
0F
1E
1D
1C
0B
0A
0@
0?
1>
1=
0<
1;
1:
19
18
07
06
05
14
03
b1 2
b110 1
b111 0
b1010 /
b10001 .
0-
1,
b111 +
b1010 *
0)
b111 (
b1010 '
b10001 &
b10001 %
0$
0#
0"
b1000110 !
$end
#10000
0a"
b0 T"
b0 \"
0u
09"
1C"
0}
b0 v
b0 !#
0L
0{
0!"
b0 w
b0 "#
0E
14"
1@
1H
0G
0Z
b0 T
1%"
0'"
b0 |
b0 K"
0)"
0="
b0 ~
b0 L"
1<
0D
0,
0/"
b10 *"
0H"
b110 %
b110 x
b110 ""
b1 >"
08
15
0=
b1 1
0O
b110 &
b110 .
b110 2
0N
1-"
02"
b1 &"
b1 5"
03"
b1 ("
b1 6"
0G"
b1 <"
b1 J"
01"
09
16
0>
0P
1+"
00"
0D"
0;
b1 $"
13
0:
0J
b1 #"
b0 7"
b101 !
b101 -#
b101 0
b101 z
b1 /
b1 y
b1 $#
b0 %#
b1 &#
b101 (
b101 +
b101 t
b101 ,#
b1 '
b1 *
b1 s
b1 ##
#20000
0D
0%"
1)"
b1 ~
b1 L"
0C"
1H"
b10 >"
0<
0=
1/"
14"
b1011 %
b1011 x
b1011 ""
b11 *"
0H
1O
0B"
1G"
b10 <"
b10 J"
18
05
b0 1
1@
b1011 &
b1011 .
b1011 2
0?
0-"
b0 &"
b0 5"
13"
b11 ("
b11 6"
0I
1P
0@"
1E"
19
06
1A
0+"
10"
0C
1K
b10 8"
b10 '#
03
1:
b10 #"
b10010 !
b10010 -#
b1001 0
b1001 z
b10 /
b10 y
b10 $#
b0 &#
b1001 (
b1001 +
b1001 t
b1001 ,#
b10 '
b10 *
b10 s
b10 ##
#30000
19"
1L
1{
1E
1G
1'"
b1 |
b1 K"
1D
04"
b1 *"
0C"
1H"
b1001 %
b1001 x
b1001 ""
b10 >"
0@
1=
b110 1
0H
1O
b1001 &
b1001 .
b1001 2
12"
b10 &"
b10 5"
1B"
0G"
b1 <"
b1 J"
0A
1>
1I
0P
0,"
11"
1@"
0E"
1+"
04
1;
1C
0K
b10 $"
b1 8"
b11 %#
b11 &#
13
b11 #"
b10010 !
b10010 -#
b110 0
b110 z
b11 /
b11 y
b0 $#
b0 '#
b110 (
b110 +
b110 t
b110 ,#
b11 '
b11 *
b11 s
b11 ##
#40000
1a"
b1 T"
b1 \"
1u
1}
b1 v
b1 !#
0{
1;"
1Z
b1 T
1="
0'"
b10 |
b10 K"
0)"
b10 ~
b10 L"
1,
0H"
0D
0C"
b10001 %
b10001 x
b1 ""
b0 >"
0O
1N
1G"
b11 <"
b11 J"
0=
b100 1
0H
b10001 &
b10001 .
b1 2
0G
02"
b0 &"
b0 5"
03"
b1 ("
b1 6"
1A"
b1 :"
b1 I"
1P
1,"
01"
1E"
0>
0I
1F
0+"
00"
1?"
14
0;
1K
b1 $"
b11 8"
b100 $#
b100 '#
03
0:
1B
b0 #"
b1 7"
b110100 !
b110100 -#
b1101 0
b1101 z
b100 /
b100 y
b0 %#
b100 &#
b1101 (
b1101 +
b1101 t
b1101 ,#
b100 '
b100 *
b100 s
b100 ##
#50000
1C"
b1 >"
1H
1{
1!"
b1 w
b1 "#
1D
1=
1'"
b11 |
b11 K"
1)"
b11 ~
b11 L"
1?
1%"
04"
1<
0/"
b10100 %
b10100 x
b100 ""
b0 *"
0@
13"
b11 ("
b11 6"
08
b10100 &
b10100 .
b100 2
15
b111 1
1-"
b1 &"
b1 5"
1A
11"
09
16
1+"
1;
b11 $"
b101 %#
13
b1 #"
b1001011 !
b1001011 -#
b1111 0
b1111 z
b101 /
b101 y
b101 $#
b101 &#
b101 '#
b1111 (
b1111 +
b1111 t
b1111 ,#
b101 '
b101 *
b101 s
b101 ##
#60000
0a"
b0 T"
b0 \"
0u
09"
0}
b0 v
b0 !#
0{
0D
0!"
b0 w
b0 "#
0;"
0=
0'"
b0 |
b0 K"
14"
b10 *"
0Z
b0 T
0="
1@
0?
0%"
0)"
b0 ~
b0 L"
0L
0,
1C"
0H"
b110 %
b110 x
b110 ""
b1 >"
0<
1H
0G
0E
0O
b110 &
b110 .
b110 2
0N
0A"
b0 :"
b0 I"
0G"
b1 <"
b1 J"
05
b0 1
0-"
b0 &"
b0 5"
0."
b10 ("
b10 6"
1I
0F
0P
0,"
01"
0@"
0E"
06
0+"
10"
04
0;
0C
0K
b0 $"
b0 8"
03
1:
b10 #"
b0 !
b0 -#
b0 0
b0 z
b110 /
b110 y
b0 $#
b0 %#
b0 &#
b0 '#
b0 (
b0 +
b0 t
b0 ,#
b110 '
b110 *
b110 s
b110 ##
#70000
